import { useEffect,  useState, useCallback, useRef } from 'react';
import { ConnectionStatus, WebSocketMessage } from '../types/message.type';
import { Message } from '../types/message.type';


interface UseWebSocketProps {
  url: string;                    // WebSocket server-рЃўрЃА URL
  onMessage?: (message: Message) => void;  // рЃарЃЮрЃфрЃљ рЃљрЃ«рЃљрЃџрЃў рЃЏрЃћрЃАрЃўрЃ»рЃў рЃЏрЃЮрЃЋрЃљ
  autoReconnect?: boolean;        // рЃљрЃЋрЃбрЃЮрЃЏрЃљрЃбрЃБрЃарЃљрЃЊ рЃЌрЃљрЃЋрЃўрЃЊрЃљрЃю рЃЊрЃљрЃБрЃЎрЃљрЃЋрЃерЃўрЃарЃЊрЃћрЃА?
  reconnectInterval?: number;     // рЃарЃљрЃЏрЃЊрЃћрЃю рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃерЃў рЃАрЃфрЃљрЃЊрЃЮрЃА рЃЌрЃљрЃЋрЃўрЃЊрЃљрЃю
}

export const useWebSocket = ({
  url,
  onMessage,
  autoReconnect = true,
  reconnectInterval = 3000,
}: UseWebSocketProps) => {
  // рЃАрЃбрЃћрЃўрЃбрЃћрЃЉрЃў
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>(
    ConnectionStatus.CONNECTING
  );
  const [messages, setMessages] = useState<Message[]>([]);
  
  // Refs - рЃарЃЮрЃЏ рЃљрЃа рЃњрЃљрЃЊрЃљрЃўрЃбрЃЋрЃўрЃарЃЌрЃЮрЃА рЃЎрЃЮрЃЏрЃърЃЮрЃюрЃћрЃюрЃбрЃў
  const socketRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃА WebSocket-рЃА
  const connect = useCallback(() => {
    try {
      console.log('­Ъћё WebSocket-рЃЌрЃљрЃю рЃЊрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃљ рЃўрЃгрЃДрЃћрЃЉрЃљ...');
      const socket = new WebSocket(url);
      socketRef.current = socket;

      // рЃарЃЮрЃфрЃљ рЃЎрЃљрЃЋрЃерЃўрЃарЃў рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃЊрЃљрЃЏрЃДрЃљрЃарЃЊрЃљ
      socket.onopen = () => {
        console.log('РюЁ WebSocket-рЃЌрЃљрЃю рЃЊрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃљ рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃБрЃџрЃўрЃљ!');
        setConnectionStatus(ConnectionStatus.CONNECTED);
      };

      // рЃарЃЮрЃфрЃљ рЃљрЃ«рЃљрЃџрЃў рЃЏрЃћрЃАрЃўрЃ»рЃў рЃЏрЃЮрЃЋрЃљ рЃАрЃћрЃарЃЋрЃћрЃарЃўрЃЊрЃљрЃю
      socket.onmessage = (event: MessageEvent) => {
        try {
          const data: WebSocketMessage = JSON.parse(event.data);
          
          // рЃЌрЃБ рЃЏрЃћрЃАрЃўрЃ»рЃўрЃА рЃбрЃўрЃърЃўрЃљ рЃЊрЃљ рЃбрЃћрЃЦрЃАрЃбрЃў рЃљрЃЦрЃЋрЃА
          if (data.type === 'message' && data.payload.text) {
            const newMessage: Message = {
              id: Date.now().toString(),
              text: data.payload.text,
              sender: 'other',  // рЃАрЃ«рЃЋрЃљ рЃљрЃЊрЃљрЃЏрЃўрЃљрЃюрЃўрЃАрЃњрЃљрЃю рЃЏрЃЮрЃАрЃБрЃџрЃў рЃЏрЃћрЃАрЃўрЃ»рЃў
              timestamp: new Date(data.payload.timestamp || Date.now()),
              username: data.payload.username,
            };

            // рЃЋрЃљрЃЏрЃљрЃбрЃћрЃЉрЃЌ рЃЏрЃћрЃАрЃўрЃ»рЃћрЃЉрЃўрЃА рЃАрЃўрЃљрЃерЃў
            setMessages((prev) => [...prev, newMessage]);
            
            // рЃЋрЃўрЃФрЃљрЃ«рЃћрЃЉрЃЌ callback-рЃА рЃЌрЃБ рЃљрЃарЃАрЃћрЃЉрЃЮрЃЉрЃА
            onMessage?.(newMessage);
          }
        } catch (error) {
          console.error('РЮї рЃЏрЃћрЃАрЃўрЃ»рЃўрЃА рЃърЃљрЃарЃАрЃЋрЃўрЃА рЃерЃћрЃфрЃЊрЃЮрЃЏрЃљ:', error);
        }
      };

      // рЃарЃЮрЃфрЃљ рЃЎрЃљрЃЋрЃерЃўрЃарЃў рЃгрЃДрЃЊрЃћрЃЉрЃљ
      socket.onclose = () => {
        console.log('РЮї WebSocket рЃЎрЃљрЃЋрЃерЃўрЃарЃў рЃњрЃљрЃгрЃДрЃЊрЃљ');
        setConnectionStatus(ConnectionStatus.DISCONNECTED);

        // рЃЌрЃБ рЃљрЃЋрЃбрЃЮрЃЏрЃљрЃбрЃБрЃарЃў рЃарЃћрЃЎрЃЮрЃюрЃћрЃЦрЃбрЃўрЃљ рЃЕрЃљрЃарЃЌрЃБрЃџрЃў
        if (autoReconnect) {
          reconnectTimeoutRef.current = setTimeout(() => {
            console.log('­Ъћё рЃЌрЃљрЃЋрЃўрЃЊрЃљрЃю рЃЊрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃљ...');
            connect();
          }, reconnectInterval);
        }
      };

      // рЃарЃЮрЃфрЃљ рЃерЃћрЃфрЃЊрЃЮрЃЏрЃљ рЃЏрЃЮрЃ«рЃЊрЃћрЃЉрЃљ
      socket.onerror = (error) => {
        console.error('РЮї WebSocket рЃерЃћрЃфрЃЊрЃЮрЃЏрЃљ:', error);
        setConnectionStatus(ConnectionStatus.ERROR);
      };
    } catch (error) {
      console.error('РЮї WebSocket-рЃўрЃА рЃерЃћрЃЦрЃЏрЃюрЃўрЃА рЃерЃћрЃфрЃЊрЃЮрЃЏрЃљ:', error);
      setConnectionStatus(ConnectionStatus.ERROR);
    }
  }, [url, autoReconnect, reconnectInterval, onMessage]);

  // рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃЏрЃћрЃАрЃўрЃ»рЃўрЃА рЃњрЃљрЃАрЃљрЃњрЃќрЃљрЃЋрЃюрЃљрЃЊ
  const sendMessage = useCallback((text: string, username?: string) => {
    // рЃЋрЃљрЃЏрЃЮрЃгрЃЏрЃћрЃЉрЃЌ рЃљрЃарЃўрЃА рЃЌрЃБ рЃљрЃарЃљ рЃЎрЃљрЃЋрЃерЃўрЃарЃў рЃдрЃўрЃљ
    if (socketRef.current?.readyState === WebSocket.OPEN) {
      // рЃЋрЃЦрЃЏрЃюрЃўрЃЌ рЃЏрЃћрЃАрЃўрЃ» рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃА
      const message: WebSocketMessage = {
        type: 'message',
        payload: {
          text,
          username: username || 'Anonymous',
          timestamp: new Date()
        },
      };
      socketRef.current.send(JSON.stringify(message));

      // рЃЋрЃљрЃЏрЃљрЃбрЃћрЃЉрЃЌ рЃЕрЃЋрЃћрЃюрЃА рЃџрЃЮрЃЎрЃљрЃџрЃБрЃа рЃЏрЃћрЃАрЃўрЃ»рЃћрЃЉрЃўрЃА рЃАрЃўрЃљрЃерЃў
      const newMessage: Message = {
        id: Date.now().toString(),
        text,
        sender: 'me',  // рЃћрЃА рЃЕрЃћрЃЏрЃў рЃЏрЃћрЃАрЃўрЃ»рЃўрЃљ
        timestamp: new Date(),
        username,
      };

      setMessages((prev) => [...prev, newMessage]);
      return true;  // рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃњрЃљрЃўрЃњрЃќрЃљрЃЋрЃюрЃљ
    }
    
    console.warn('Рџа№ИЈ рЃЎрЃљрЃЋрЃерЃўрЃарЃў рЃљрЃа рЃљрЃарЃўрЃА рЃдрЃўрЃљ!');
    return false;  // рЃЋрЃћрЃа рЃњрЃљрЃўрЃњрЃќрЃљрЃЋрЃюрЃљ
  }, []);

  // рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃњрЃљрЃЌрЃўрЃерЃЋрЃљ
  const disconnect = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    socketRef.current?.close();
    socketRef.current = null;
  }, []);

  // рЃарЃЮрЃфрЃљ рЃЎрЃЮрЃЏрЃърЃЮрЃюрЃћрЃюрЃбрЃў mount-рЃЊрЃћрЃЉрЃљ, рЃЋрЃБрЃЎрЃљрЃЋрЃерЃўрЃарЃЊрЃћрЃЉрЃўрЃЌ WebSocket-рЃА
  useEffect(() => {
    connect();

    // рЃарЃЮрЃфрЃљ рЃЎрЃЮрЃЏрЃърЃЮрЃюрЃћрЃюрЃбрЃў unmount-рЃЊрЃћрЃЉрЃљ, рЃЋрЃгрЃДрЃЋрЃћрЃбрЃЌ рЃЎрЃљрЃЋрЃерЃўрЃарЃА
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  // рЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃЌ рЃДрЃЋрЃћрЃџрЃљрЃцрЃћрЃарЃА рЃарЃљрЃф рЃАрЃГрЃўрЃарЃЊрЃћрЃЉрЃљ рЃЎрЃЮрЃЏрЃърЃЮрЃюрЃћрЃюрЃбрЃА
  return {
    messages,              // рЃДрЃЋрЃћрЃџрЃљ рЃЏрЃћрЃАрЃўрЃ»рЃў
    sendMessage,           // рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃЏрЃћрЃАрЃўрЃ»рЃўрЃА рЃњрЃљрЃАрЃљрЃњрЃќрЃљрЃЋрЃюрЃљрЃЊ
    connectionStatus,      // рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃАрЃбрЃљрЃбрЃБрЃАрЃў
    isConnected: connectionStatus === ConnectionStatus.CONNECTED,
    disconnect,            // рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃњрЃљрЃАрЃљрЃЌрЃўрЃерЃљрЃЊ
    reconnect: connect,    // рЃ«рЃћрЃџрЃўрЃЌ рЃЌрЃљрЃЋрЃўрЃЊрЃљрЃю рЃЊрЃљрЃАрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃџрЃљрЃЊ
  };
};